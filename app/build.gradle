apply from: '../repositories.gradle'
apply plugin: 'com.android.application'
apply from: '../dist.gradle'

ext {
    /* Version code for *next* release, bump *after* a release is created. */
    // 1 or more digits
    versionMajor = 3
    // exactly 1 digit
    versionMinor = 0
    // exactly 2 digits
    versionBuild = 3
}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.0'

    defaultConfig {
        applicationId "com.afwsamples.testdpc"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode versionMajor * 1000 + versionMinor * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionBuild}"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        check 'NewApi'
        abortOnError true
        xmlReport false
        textReport true
        textOutput "stdout"
    }

    signingConfigs {
        debug {
            storeFile file("$projectDir/debug.keystore")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    productFlavors {
        standard {
            minSdkVersion 21
            targetSdkVersion 23
        }

        N {
            minSdkVersion 'N'
            targetSdkVersion 'N'
        }
    }

    /* TODO: Remove once release version of N SDK is released. */
       applicationVariants.all { variant ->
           variant.outputs.each { output ->
               output.processManifest.doLast {
                   // minSdkVersion and targetSdkVersion are overrided if we build against preview
                   // SDK, let us override them again here.
                   minSdkVersion = variant.getMergedFlavor().minSdkVersion.getApiString();
                   targetSdkVersion = variant.getMergedFlavor().targetSdkVersion.getApiString();

                   def manifestOutFile = output.processManifest.manifestOutputFile
                   def newFileContents = manifestOutFile.getText('UTF-8').
                           replace('android:minSdkVersion="N"',
                                   'android:minSdkVersion="' + minSdkVersion + '"')
                   newFileContents = newFileContents.replace('android:targetSdkVersion="N"',
                           'android:targetSdkVersion="' + targetSdkVersion + '"')
                   manifestOutFile.write(newFileContents, 'UTF-8')
               }
           }
       }

    // Enable lint checking in all build variants.
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def lintTask = tasks["lint${variant.name.capitalize()}"]
            output.assemble.dependsOn lintTask
        }
    }
}

dependencies {
    compile "com.android.support:support-v4:22.0.0"
    compile "com.android.support:support-v13:22.0.0"
    compile(name:'setup-wizard-lib-platform-release', ext:'aar')
}
